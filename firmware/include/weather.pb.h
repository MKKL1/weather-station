/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_PROTO_WEATHER_PB_H_INCLUDED
#define PB_PROTO_WEATHER_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _proto_Histogram {
    pb_callback_t data;
    uint32_t count;
    uint32_t interval_duration;
    uint32_t start_time;
} proto_Histogram;

typedef struct _proto_DeviceInfo {
    pb_callback_t id;
    float mmPerTip;
    uint32_t instanceId;
} proto_DeviceInfo;

typedef struct _proto_WeatherData {
    uint64_t created_at;
    float temperature;
    float pressure;
    float humidity;
    bool has_tips;
    proto_Histogram tips;
    bool has_info;
    proto_DeviceInfo info;
} proto_WeatherData;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define proto_Histogram_init_default             {{{NULL}, NULL}, 0, 0, 0}
#define proto_DeviceInfo_init_default            {{{NULL}, NULL}, 0, 0}
#define proto_WeatherData_init_default           {0, 0, 0, 0, false, proto_Histogram_init_default, false, proto_DeviceInfo_init_default}
#define proto_Histogram_init_zero                {{{NULL}, NULL}, 0, 0, 0}
#define proto_DeviceInfo_init_zero               {{{NULL}, NULL}, 0, 0}
#define proto_WeatherData_init_zero              {0, 0, 0, 0, false, proto_Histogram_init_zero, false, proto_DeviceInfo_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define proto_Histogram_data_tag                 1
#define proto_Histogram_count_tag                2
#define proto_Histogram_interval_duration_tag    3
#define proto_Histogram_start_time_tag           4
#define proto_DeviceInfo_id_tag                  1
#define proto_DeviceInfo_mmPerTip_tag            2
#define proto_DeviceInfo_instanceId_tag          3
#define proto_WeatherData_created_at_tag         1
#define proto_WeatherData_temperature_tag        2
#define proto_WeatherData_pressure_tag           3
#define proto_WeatherData_humidity_tag           4
#define proto_WeatherData_tips_tag               5
#define proto_WeatherData_info_tag               6

/* Struct field encoding specification for nanopb */
#define proto_Histogram_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, BYTES,    data,              1) \
X(a, STATIC,   SINGULAR, UINT32,   count,             2) \
X(a, STATIC,   SINGULAR, UINT32,   interval_duration,   3) \
X(a, STATIC,   SINGULAR, UINT32,   start_time,        4)
#define proto_Histogram_CALLBACK pb_default_field_callback
#define proto_Histogram_DEFAULT NULL

#define proto_DeviceInfo_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   id,                1) \
X(a, STATIC,   SINGULAR, FLOAT,    mmPerTip,          2) \
X(a, STATIC,   SINGULAR, UINT32,   instanceId,        3)
#define proto_DeviceInfo_CALLBACK pb_default_field_callback
#define proto_DeviceInfo_DEFAULT NULL

#define proto_WeatherData_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   created_at,        1) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       2) \
X(a, STATIC,   SINGULAR, FLOAT,    pressure,          3) \
X(a, STATIC,   SINGULAR, FLOAT,    humidity,          4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tips,              5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  info,              6)
#define proto_WeatherData_CALLBACK NULL
#define proto_WeatherData_DEFAULT NULL
#define proto_WeatherData_tips_MSGTYPE proto_Histogram
#define proto_WeatherData_info_MSGTYPE proto_DeviceInfo

extern const pb_msgdesc_t proto_Histogram_msg;
extern const pb_msgdesc_t proto_DeviceInfo_msg;
extern const pb_msgdesc_t proto_WeatherData_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define proto_Histogram_fields &proto_Histogram_msg
#define proto_DeviceInfo_fields &proto_DeviceInfo_msg
#define proto_WeatherData_fields &proto_WeatherData_msg

/* Maximum encoded size of messages (where known) */
/* proto_Histogram_size depends on runtime parameters */
/* proto_DeviceInfo_size depends on runtime parameters */
/* proto_WeatherData_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
